Week 5 Homework Submission File: Archiving and Logging Data
Please edit this file by adding the solution commands on the line below the prompt.
Save and submit the completed file for your homework submission.
________________


Step 1: Create, Extract, Compress, and Manage tar Backup Archives
1. Command to extract the TarDocs.tar archive to the current directory: 
tar xvvf Tardocs.tar ( you should be in the ~/Projects directory when extracting the tar docs)

2. Command to create the Javaless_Doc.tar archive from the TarDocs/ directory, while excluding the TarDocs/Documents/Java directory: 
tar --exclude=’Documents/Java’ -cvvf Javaless_doc.tar TarDocs, but you must be in ~/Projects in order to run this command 



3. Command to ensure Java/ is not in the new Javaless_Docs.tar archive:
sudo tar -tvf Javaless_Doc.tar | grep Java
Bonus
   * Command to create an incremental archive called logs_backup_tar.gz with only changed files to snapshot.file for the /var/log directory:
sudo tar -zcf logs_backup_tar.gz --exclude /var/log/snapshot.txt
Critical Analysis Question
   * Why wouldn't you use the options -x and -c at the same time with tar?
we would not use -x for extracting at the same time as creating, because -x is going to extract the tar archive that is already created and ready to be extracted. -c will create a tar archive, making these two commands almost exactly the same due to -x will create a file of the extracting tar archive while create well creates one :) 
________________


Step 2: Create, Manage, and Automate Cron Jobs
   1. Cron job for backing up the /var/log/auth.log file:
 0 6 * * 3 tar -czvf /auth_backup.tar.gz /var/log/auth.log 
________________
Step 3: Write Basic Bash Scripts
Brace expansion command to create the four subdirectories:
mkdir -p ~/backups/{freemem,diskuse,openlist,freedisk}
Paste your system.sh script edits below:
#!/bin/bash


# The command below will display the free space on the computer and will then right the free space output to a text file :) 


free -h > ~/Projects/TarDocs/backups/freemem/free_mem.txt


# The command below will display the diskusage of all the files and directories on the system you are working on, and then output to a text file :)


du -h -c > ~/Projects/TarDocs/backups/diskuse/disk_usage.txt


# The command below will display the a list of info on the system machine, and then output to a text file :) 


lsof > ~/Projects/TarDocs/backcatups/openlist/open_list.txt


# The command below will display the available disk space that is currently available to the system, and then output to a text file :)


df -h > ~/Projects/TarDocs/backups/freedisk/free-disk.txt


# The command below will display meta data such as the Inods and Iused etc... then we will appened it into the initial free-disk.txt :) 


df -i >> ~/Projects/TarDocs/backups/free-disk.txt


Command to make the system.sh script executable:
chmod +x system.sh

Optional
   * Commands to test the script and confirm its execution:
cd
./system
cat ~/backups/freemem/free_mem.txt
cat ~/backups/openlist/open_list.txt
cat ~/backups/freedisk/free_disk.txt
cat ~/backups/diskuse/disk_usage.txt
Bonus
   * Command to copy system to system-wide cron directory:
sudo cd ~/home/sysadmin/ | crontab -e * * * * * tar -zcvf ~./system
________________


Step 4. Manage Log File Sizes
   1. Run sudo nano /etc/logrotate.conf to edit the logrotate configuration file.

Configure a log rotation scheme that backs up authentication messages to the /var/log/auth.log.

      * Add your config file edits below:
      2. /var/log/auth.log {
weekly
rotate 7
notifempty
delaycompress
missingok
createscript
}
________________


Bonus: Check for Policy and File Violations
      1. Command to verify auditd is active:

      2. Command to set number of retained logs and maximum log file size:

         * Add the edits made to the configuration file below:
         3. [Your solution edits here]

         4. Command using auditd to set rules for /etc/shadow, /etc/passwd and /var/log/auth.log:

            * Add the edits made to the rules file below:
            5. [Your solution edits here]

            6. Command to restart auditd:

            7. Command to list all auditd rules:

            8. Command to produce an audit report:

            9. Create a user with sudo useradd attacker and produce an audit report that lists account modifications:

            10. Command to use auditd to watch /var/log/cron:

            11. Command to verify auditd rules:

________________


Bonus (Research Activity): Perform Various Log Filtering Techniques
               1. Command to return journalctl messages with priorities from emergency to error:

               2. Command to check the disk usage of the system journal unit since the most recent boot:

               3. Comand to remove all archived journal files except the most recent two:

               4. Command to filter all log messages with priority levels between zero and two, and save output to /home/sysadmin/Priority_High.txt:

               5. Command to automate the last command in a daily cronjob. Add the edits made to the crontab file below:

[Your solution cron edits here]